<?xml version="1.0" encoding="UTF-8"?>

<!--
  Requirements:
 
  Pear:
    - phpcs
    -
  PECL:
    - xdebug

  JavaScript:
  - closure-compiler (npm install -g closure-compiler): Bindings to Google's Closure Compiler
  - jshint (npm install -g jshint): A CLI for JSHint
  - fixmyjs (npm install -g fixmyjs): Automatically fixes silly errors from jshint 
  
  
-->

<project name="Neatline" default="build">
  
  <property environment="ENV" />
  
  <property name="build_dir" value="${build_dir}/" />
  <property name="report_dir" value="${build_dir}/report" />
  
  <!-- Load the Ant-contrib to give us access to some very useful tasks! -->
  <!-- the .jar file is located in the tools directory -->
  <taskdef resource="net/sf/antcontrib/antlib.xml">
    <classpath>
      <pathelement location="${build_dir}/tools/ant-contrib-1.0b3.jar"/>
    </classpath>
  </taskdef>
  
  
 <target name="build"
   depends="prepare,lint,phploc,pdepend,phpmd-ci,phpcs-ci,phpcpd,phpdoc,phpunit,phpcb"/>

 <target name="build-parallel"
   depends="prepare,lint,tools-parallel,phpunit,phpcb"/>
  
  <target name="install-dependencies" description="Installs PEAR and node dependencies">
    <!-- auto-discover channels -->
    <exec executable="pear">
      <arg value="config-set"/>
      <arg value="auto_discover"/>
      <arg value="1" />
    </exec>
    
    <exec executable="pear">
      <arg value="install" />
      <arg value="--alldeps" />
      <arg value="pear.phpunit.de/PHPUnit" />
      <arg value="PHP_CodeSniffer" />
      <arg value="pear.pdepend.org/PHP_Depend" />
      <arg value="pear.phpmd.org/PHP_PMD" />
      <arg value="pear.phpqatools.org/phpqatools" />
      <arg value="pear.netpirates.net/phpDox" />
    </exec>
    
    <exec executable="pecl">
      <arg value="install" />
      <arg value="xdebug"/>
    </exec>
    
    <echo>Installing npm packages...</echo>
    
    <exec executable="npm">
      <arg value="-g" />
      <arg value="install"/>
      <arg value="closure-compiler" />
      <arg value="jshint" />
      <arg value="fixmyjs" />
    </exec>
  </target>
  
  <target name="update-dependencies" description="Updates testing dependencies">
    <exec executable="pear">
      <arg value="update-channels" />
    </exec>
    
    <exec executable="pear">
      <arg value="upgrade-all" />
    </exec>
    
    <exec executable="pecl">
      <arg value="upgrade-all" />
    </exec>
    
    <exec executable="npm">
      <arg value="update"/>
      <arg value="npm" />
      <arg value="closure-compiler" />
      <arg value="jshint" />
      <arg value="fixmyjs" />
      <arg value="-g" />
    </exec>
  </target>

 <target name="tools-parallel"
         description="Run tools in parallel">
  <parallel threadCount="2">
   <sequential>
    <antcall target="pdepend"/>
    <antcall target="phpmd-ci"/>
   </sequential>
   <antcall target="phpcpd"/>
   <antcall target="phpcs-ci"/>
   <antcall target="phploc"/>
   <antcall target="phpdoc"/>
  </parallel>
 </target>

 <target name="clean" description="Cleanup build artifacts">
  <delete dir="${build_dir}/api"/>
  <delete dir="${build_dir}/code-browser"/>
  <delete dir="${build_dir}/coverage"/>
  <delete dir="${build_dir}/logs"/>
  <delete dir="${build_dir}/pdepend"/>
 </target>

 <target name="prepare" depends="clean"
         description="Prepare for build">
  <mkdir dir="${build_dir}/api"/>
  <mkdir dir="${build_dir}/code-browser"/>
  <mkdir dir="${build_dir}/coverage"/>
  <mkdir dir="${build_dir}/logs"/>
  <mkdir dir="${build_dir}/pdepend"/>
 </target>

 <target name="lint">
  <apply executable="php" failonerror="true">
   <arg value="-l" />

   <fileset dir="${basedir}/">
    <include name="**/*.php" />
    <modified />
   </fileset>

   <fileset dir="${basedir}/tests">
    <include name="**/*.php" />
    <modified />
   </fileset>
  </apply>
  </target>

  <target name="jshint" description="Use the JSHint Linter to find issues in
    your JavaScript">
    <exec executable="jshint">
      <arg value="--nojsdoc" />
      <arg value="-r" />
      <arg path="${basedir}" />
    </exec>
  </target>

  <target name="fixstyle" description="Automate the fixing of common JavaScript
    errors">
    <exec executable="fixjsstyle">
      <arg value="--nojsdoc" />
      <arg value="-r" />
      <arg path="${basedir}/" />
    </exec>
  </target>

 <target name="phploc" description="Measure project size using PHPLOC">
  <exec executable="phploc">
   <arg value="--log-csv" />
   <arg value="${build_dir}/logs/phploc.csv" />
   <arg path="${basedir}/" />
  </exec>
 </target>

 <target name="pdepend"
         description="Calculate software metrics using PHP_Depend">
  <exec executable="pdepend">
   <arg value="--jdepend-xml=${build_dir}/logs/jdepend.xml" />
   <arg value="--jdepend-chart=${build_dir}/pdepend/dependencies.svg" />
   <arg value="--overview-pyramid=${build_dir}/pdepend/overview-pyramid.svg" />
   <arg path="${basedir}/" />
  </exec>
 </target>

 <target name="phpmd"
         description="Perform project mess detection using PHPMD">
  <exec executable="phpmd">
   <arg path="${basedir}/" />
   <arg value="text" />
   <arg value="${build_dir}/phpmd.xml" />
  </exec>
 </target>

 <target name="phpmd-ci"
         description="Perform project mess detection using PHPMD">
  <exec executable="phpmd">
   <arg path="${basedir}/" />
   <arg value="xml" />
   <arg value="${build_dir}/phpmd.xml" />
   <arg value="--reportfile" />
   <arg value="${build_dir}/logs/pmd.xml" />
  </exec>
 </target>

 <target name="phpcs"
         description="Find coding standard violations using PHP_CodeSniffer">
  <exec executable="phpcs">
   <arg value="--standard=${build_dir}/phpcs.xml" />
   <arg path="${basedir}/" />
  </exec>
 </target>

 <target name="phpcs-ci"
         description="Find coding standard violations using PHP_CodeSniffer">
  <exec executable="phpcs" output="/dev/null">
   <arg value="--report=checkstyle" />
   <arg value="--report-file=${build_dir}/logs/checkstyle.xml" />
   <arg value="--standard=${build_dir}/phpcs.xml" />
   <arg path="${basedir}/" />
  </exec>
 </target>

 <target name="phpcpd" description="Find duplicate code using PHPCPD">
  <exec executable="phpcpd">
   <arg value="--log-pmd" />
   <arg value="${build_dir}/logs/pmd-cpd.xml" />
   <arg path="${basedir}/" />
  </exec>
 </target>

 <target name="phpdoc"
         description="Generate API documentation using PHPDocumentor">
  <exec executable="phpdoc">
   <arg value="--directory" />
   <arg path="${basedir}/" />
   <arg value="--target" />
   <arg path="${build_dir}/api" />
  </exec>
 </target>

 <target name="phpunit" description="Run unit tests with PHPUnit">
  <exec executable="phpunit" failonerror="true"/>
 </target>

 <target name="phpcb"
         description="Aggregate tool output with PHP_CodeBrowser">
  <exec executable="phpcb">
   <arg value="--log" />
   <arg path="${build_dir}/logs" />
   <arg value="--source" />
   <arg path="${basedir}/" />
   <arg value="--output" />
   <arg path="${build_dir}/code-browser" />
  </exec>
 </target>
</project>
