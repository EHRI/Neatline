{
  "name": "Backbone.EventBinder",
  "description": "Manage your Backbone event bindings better",
  "version": "1.0.0",
  "homepage": "https://github.com/marionettejs/backbone.eventbinder",
  "keywords": [
    "backbone",
    "plugin",
    "computed",
    "field",
    "model",
    "client",
    "browser"
  ],
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/marionettejs/backbone.eventbinder/blob/master/LICENSE.md"
    }
  ],
  "scripts": {
    "test": "grunt jasmine",
    "start": "grunt jasmine-server"
  },
  "author": {
    "name": "Derick Bailey",
    "email": "marionettejs@gmail.com",
    "url": "http://derickbailey.lostechies.com"
  },
  "bugs": {
    "url": "https://github.com/marionettejs/backbone.eventbinder/issues"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/marionettejs/backbone.eventbinder.git"
  },
  "github": "https://github.com/marionettejs/backbone.eventbinder",
  "devDependencies": {
    "grunt": "*",
    "grunt-jasmine-runner": "latest",
    "grunt-rigger": "*"
  },
  "readme": "# Backbone.EventBinder\n\nManage your Backbone events better.\n\n## About Backbone.EventBinder\n\nBackbone's events are a great way to decouple parts of your system, but \nthey have some limitations and behaviors that you need to be aware of\nwhich can cause \n[zombie objects and memory leaks](http://lostechies.com/derickbailey/2011/09/15/zombies-run-managing-page-transitions-in-backbone-apps/) \nif you're not careful.\n\nBackbone.EventBinder provides a simple mechanism for cleaning up your\nevent bindings, including the ability to clean up anonymous callback\nfunctions!\n\n## Downloads And Source\n\nGrab the source from the `src` folder above. Grab the most recent builds\nfrom the links below.\n\n### Standard Builds\n\n* Development: [backbone.eventbinder.js](https://raw.github.com/marionettejs/backbone.eventbinder/master/lib/backbone.eventbinder.js)\n\n* Production: [backbone.eventbinder.min.js](https://raw.github.com/marionettejs/backbone.eventbinder/master/lib/backbone.eventbinder.min.js)\n\n### RequireJS (AMD) Builds\n\n* Development: [backbone.eventbinder.js](https://raw.github.com/marionettejs/backbone.eventbinder/master/lib/amd/backbone.eventbinder.js)\n\n* Production: [backbone.eventbinder.min.js](https://raw.github.com/marionettejs/backbone.eventbinder/master/lib/amd/backbone.eventbinder.min.js)\n\n## Documentation\n\nThe `EventBinder` object provides event binding management for related\nevents, across any number of objects that trigger the events. This allows\nevents to be grouped together and unbound with a single call during the \nclean-up of an object that is bound to the events.\n\nUltimately, the EventBinder calls back to the standard Backbone `on` method\nof the object for which events are being handled. The benefit of using the\nEventBinder then, is that you no longer have to manually manage calling `off`\nfor each of these events, and you can safely use anonymous callback functions\nas event arguments and stil be able to unbind them when needed.\n\n### Bind Events\n\nThe basic syntax for binding events is to use the `bindTo` method which \nfollows the path of Backbone's `on` method for events, but adds one parameter \nto the beginning of the method call: the object that triggers the event.\n\nFor example, if you have a model that you want to listen for events from,\nyou can use the EventBinder to manage the event for you:\n\n```js\nvar binder = new Backbone.EventBinder();\n\nvar model = new MyModel();\n\nvar handler = {\n  doIt: function(){ /* ... */ }\n}\n\n// same args list as model.on, but putting the model as the first parameter\nbinder.bindTo(model, \"change:foo\", handler.doIt, handler);\n```\n\nYou can specify a 4th parameter as the context in which the callback\nmethod for the event will be executed. If you leave the empty, the default\ncontext will be used (varies depending on other circumstances) just like\nBackbone's events. \n\n```js\nbinder.bindTo(model, \"change:foo\", someCallback, someContext);\n```\n\n### Unbind A Single Event\n\nWhen you call `bindTo`, it returns a \"binding\" object that can be\nused to unbind from a single event with the `unbindFrom` method:\n\n```js\nvar binding = binder.bindTo(model, \"change:foo\", someCallback, someContext);\n\n// later in the code\nbinder.unbindFrom(binding);\n```\n\nThis will unbind the event that was configured with the binding\nobject, and remove it from the EventBinder bindings.\n\n### Unbind All Events\n\nYou can call `unbindAll` to unbind all events that were bound with the\n`bindTo` method:\n\n```js\nbinder.unbindAll();\n```\n\nThis even works with in-line callback functions.\n\n### When To Use EventBinder vs `on` Handlers\n\nSee the wiki: [When to use the EventBinder](https://github.com/marionettejs/backbone.eventbinder/wiki/When-to-use-the-EventBinder)\n\n## Release History\n\n - v1.0.0 No changes, promoted stable code to 1.0 status\n - v0.1.0 Added support for jQuery style objects\n - v0.0.0 initial release, pulled from Marionette\n\n## License\n\nMIT - see [LICENSE.md](https://raw.github.com/marionettejs/backbone.eventbinder/master/LICENSE.md)\n",
  "_id": "Backbone.EventBinder@1.0.0"
}